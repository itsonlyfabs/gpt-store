import { NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import { supabase } from '@/utils/supabase'

// Create a Supabase client with the service role key for admin operations
const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
)

export async function POST(request: Request) {
  try {
    // Verify authentication
    const authHeader = request.headers.get('authorization')
    if (!authHeader?.startsWith('Bearer ')) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      )
    }

    const token = authHeader.split(' ')[1]
    const { data: { user }, error: authError } = await supabase.auth.getUser(token)
    
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Invalid authentication token' },
        { status: 401 }
      )
    }

    const body = await request.json()
    const { sessionId } = body

    if (!sessionId) {
      return NextResponse.json(
        { error: 'Session ID is required' },
        { status: 400 }
      )
    }

    // In development mode, simulate a successful verification
    if (process.env.NODE_ENV === 'development' && sessionId.startsWith('dev_session_')) {
      // Create a purchase record in the database using the admin client
      const { error: purchaseError } = await supabaseAdmin
        .from('purchases')
        .insert({
          user_id: user.id,
          product_id: '123e4567-e89b-12d3-a456-426614174000',
          stripe_session_id: sessionId,
          status: 'completed',
          amount_paid: 2999, // $29.99
          currency: 'usd'
        })

      if (purchaseError) {
        console.error('Failed to create purchase record:', purchaseError)
        return NextResponse.json(
          { error: 'Failed to create purchase record' },
          { status: 500 }
        )
      }

      return NextResponse.json({ verified: true })
    }

    // For production, verify the Stripe session
    const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY)
    const session = await stripe.checkout.sessions.retrieve(sessionId)

    if (!session || session.payment_status !== 'paid') {
      return NextResponse.json(
        { error: 'Payment not completed' },
        { status: 400 }
      )
    }

    // Create a purchase record using the admin client
    const { error: purchaseError } = await supabaseAdmin
      .from('purchases')
      .insert({
        user_id: user.id,
        product_id: session.metadata.productId,
        stripe_session_id: sessionId,
        status: 'completed',
        amount_paid: session.amount_total,
        currency: session.currency
      })

    if (purchaseError) {
      console.error('Failed to create purchase record:', purchaseError)
      return NextResponse.json(
        { error: 'Failed to create purchase record' },
        { status: 500 }
      )
    }

    return NextResponse.json({ verified: true })
  } catch (error) {
    console.error('Session verification error:', error)
    return NextResponse.json(
      { error: 'Failed to verify session' },
      { status: 500 }
    )
  }
} 